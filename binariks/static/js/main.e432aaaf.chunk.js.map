{"version":3,"sources":["Converter.js","serviceWorker.js","index.js"],"names":["firstElem","secondElem","dataSet","Converter","state","currencies","base","amount","convertTo","result","resultOld","date","labels","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointHitRadius","data","handleSelect","e","_this$setState","_this","setState","Object","defineProperty","target","name","value","calc","handleInput","isNaN","fetch","concat","then","res","json","rates","toFixed","swap","preventDefault","_this$state","this","react_default","a","createElement","className","type","onChange","placeholder","map","currency","key","onClick","disabled","react_chartjs_2_es","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_Converter_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2HAKIA,EACAC,gHAFAC,UAAU,CAAC,EAAG,IAqLHC,6MAhLbC,MAAQ,CACNC,WAAY,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAC7OC,KAAM,MACNC,OAAQ,GACRC,UAAW,MACXC,OAAQ,GACRC,UAAW,GACXC,KAAM,GAGNC,OAAQ,CAAC,aAAc,cACvBC,SAAU,CACR,CACEC,MAAO,yBACPC,MAAM,EACNC,YAAa,GACbC,gBAAiB,uBACjBC,YAAa,qBACbC,eAAgB,OAChBC,gBAAiB,QACjBC,iBAAkB,qBAClBC,qBAAsB,OACtBC,iBAAkB,EAClBC,iBAAkB,EAClBC,0BAA2B,qBAC3BC,sBAAuB,sBACvBC,sBAAuB,EACvBC,eAAgB,GAChBC,KAAM3B,OAKZ4B,aAAe,SAAAC,GAAK,IAAAC,EAClBC,EAAKC,UAALF,EAAA,GAAAG,OAAAC,EAAA,EAAAD,CAAAH,EAEKD,EAAEM,OAAOC,KAAOP,EAAEM,OAAOE,OAF9BJ,OAAAC,EAAA,EAAAD,CAAAH,EAAA,SAGY,MAHZA,GAKEC,EAAKO,SAITC,YAAc,SAAAV,GACZE,EAAKC,SACH,CACE3B,OAAQwB,EAAEM,OAAOE,MACjB9B,OAAQ,KACRE,KAAM,MAERsB,EAAKO,SAITA,KAAO,WACL,IAAMjC,EAAS0B,EAAK7B,MAAMG,OACtBA,IAAWmC,QAIbC,MAAK,mDAAAC,OAAoDX,EAAK7B,MAAME,OACjEuC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAhB,GACJ,IAAMnB,GAAamB,EAAKmB,MAAMf,EAAK7B,MAAMI,WAAaD,GAAQ0C,QAAQ,GACtEhB,EAAKC,SAAS,CACZxB,cAEFV,EAAYU,EACZR,EAAQ,GAAKF,IAGjB2C,MAAK,+CAAAC,OAAgDX,EAAK7B,MAAME,OAC7DuC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAhB,GACJ,IAAMpB,GAAUoB,EAAKmB,MAAMf,EAAK7B,MAAMI,WAAaD,GAAQ0C,QAAQ,GACnEhB,EAAKC,SAAS,CACZzB,WAEFR,EAAaQ,EACbP,EAAQ,GAAKD,QAKrBiD,KAAO,SAAAnB,GACL,IAAMzB,EAAO2B,EAAK7B,MAAME,KAClBE,EAAYyB,EAAK7B,MAAMI,UAC7BuB,EAAEoB,iBACFlB,EAAKC,SACH,CACE1B,UAAWF,EACXA,KAAME,EACNC,OAAQ,MAEVwB,EAAKO,+EAIA,IAAAY,EACkEC,KAAKjD,MAAtEC,EADD+C,EACC/C,WAAYC,EADb8C,EACa9C,KAAMC,EADnB6C,EACmB7C,OAAQC,EAD3B4C,EAC2B5C,UAAWC,EADtC2C,EACsC3C,OADtC2C,EAC8C1C,UAD9C0C,EACyDzC,KAChE,OAEE2C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAEfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,iBAAd,2BAGFH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QACdH,EAAAC,EAAAC,cAAA,SACEE,KAAK,SACLnB,MAAOhC,EACPoD,SAAUN,KAAKZ,YACfgB,UAAU,iCACVG,YAAY,iBAEdN,EAAAC,EAAAC,cAAA,UACElB,KAAK,OACLC,MAAOjC,EACPqD,SAAUN,KAAKvB,aACf2B,UAAU,gBAEXpD,EAAWwD,IAAI,SAAAC,GAAQ,OACtBR,EAAAC,EAAAC,cAAA,UAAQO,IAAKD,EAAUvB,MAAOuB,GAC3BA,OAMPR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,MAAIQ,QAASX,KAAKH,KAAMO,UAAU,gBAAlC,WAKFH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QACdH,EAAAC,EAAAC,cAAA,SACES,UAAU,EACV1B,MACa,KAAXhC,EACE,IACW,OAAXE,EACA,iBACAA,EAEJgD,UAAU,gBAEZH,EAAAC,EAAAC,cAAA,UACElB,KAAK,YACLC,MAAO/B,EACPmD,SAAUN,KAAKvB,aACf2B,UAAU,gBAETpD,EAAWwD,IAAI,SAAAC,GAAQ,OACxBR,EAAAC,EAAAC,cAAA,UAAQO,IAAKD,EAAUvB,MAAOuB,GAC3BA,QAOTR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,uCACAF,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAMrC,KAAMwB,KAAKjD,kBAxKH+D,aCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRNC,IAASC,OAAOpB,EAAAC,EAAAC,cAACmB,EAAD,MAAeC,SAASC,eAAe,SDuHjD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnC,KAAK,SAAAoC,GACjCA,EAAaC","file":"static/js/main.e432aaaf.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport {Line} from 'react-chartjs-2';\nimport './Converter.css';\n\nlet dataSet = [0, 0];\nlet firstElem;\nlet secondElem;\n\nclass Converter extends Component {\n  state = {\n    currencies: [\"EUR\", \"BGN\", \"NZD\", \"ILS\", \"RUB\", \"CAD\", \"USD\", \"PHP\", \"CHF\", \"ZAR\", \"AUD\", \"JPY\", \"TRY\", \"HKD\", \"MYR\", \"THB\", \"HRK\", \"NOK\", \"IDR\", \"DKK\", \"CZK\", \"HUF\", \"GBP\", \"MXN\", \"LTL\", \"KRW\", \"SGD\", \"BRL\", \"PLN\", \"INR\", \"RON\", \"CNY\", \"SEK\"],\n    base: \"EUR\",\n    amount: \"\",\n    convertTo: \"USD\",\n    result: \"\",\n    resultOld: \"\",\n    date: \"\",\n    \n    \n    labels: [\"01-01-2015\", \"13-05-2019\"],\n    datasets: [\n      {\n        label: 'Currency exchange rate',\n        fill: false,\n        lineTension: 0.1,\n        backgroundColor: 'rgba(75,192,192,0.4)',\n        borderColor: 'rgba(75,192,192,1)',\n        borderCapStyle: 'butt',\n        borderJoinStyle: 'miter',\n        pointBorderColor: 'rgba(75,192,192,1)',\n        pointBackgroundColor: '#fff',\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n        pointHoverBorderColor: 'rgba(220,220,220,1)',\n        pointHoverBorderWidth: 2,\n        pointHitRadius: 10,\n        data: dataSet\n      }\n    ]\n  };\n\n  handleSelect = e => {\n    this.setState(\n      {\n        [e.target.name]: e.target.value,\n        result: null\n      },\n      this.calc\n    );\n  };\n\n  handleInput = e => {\n    this.setState(\n      {\n        amount: e.target.value,\n        result: null,\n        date: null\n      },\n      this.calc\n    );\n  };\n\n  calc = () => {\n    const amount = this.state.amount;\n    if (amount === isNaN) {\n      return;\n    } else {\n\n      fetch(`https://api.exchangeratesapi.io/2015-01-01?base=${this.state.base}`)\n        .then(res => res.json())\n        .then(data => {\n          const resultOld = (data.rates[this.state.convertTo] * amount).toFixed(4);\n          this.setState({\n            resultOld\n          });\n          firstElem = resultOld;\n          dataSet[0] = firstElem;\n        });\n\n      fetch(`https://api.exchangeratesapi.io/latest?base=${this.state.base}`)\n        .then(res => res.json())\n        .then(data => {\n          const result = (data.rates[this.state.convertTo] * amount).toFixed(4);\n          this.setState({\n            result\n          });\n          secondElem = result;\n          dataSet[1] = secondElem;\n        });\n      }\n  };\n\n  swap = e => {\n    const base = this.state.base;\n    const convertTo = this.state.convertTo;\n    e.preventDefault();\n    this.setState(\n      {\n        convertTo: base,\n        base: convertTo,\n        result: null\n      },\n      this.calc\n    );\n  };\n  \n  render() {\n    const { currencies, base, amount, convertTo, result, resultOld, date } = this.state;\n    return (\n\n      <div className=\"container\">\n\n      <div className=\"header\">\n        <h1 className=\"header__title\">Currency converter app</h1>\n      </div>\n\n      <div className=\"calc\">\n        <form className=\"form\">\n          <input\n            type=\"number\"\n            value={amount}\n            onChange={this.handleInput}\n            className=\"form__input form__input_number\"\n            placeholder=\"Input amount\"\n          />\n          <select\n            name=\"base\"\n            value={base}\n            onChange={this.handleSelect}\n            className=\"form__select\"\n          >\n          {currencies.map(currency => (\n            <option key={currency} value={currency}>\n              {currency}\n            </option>\n            ))}\n          </select>\n        </form>\n\n        <div className=\"swap\">\n          <h1 onClick={this.swap} className=\"swap__symbol\">\n            &#8646;\n          </h1>\n        </div>\n\n        <form className=\"form\">\n          <input\n            disabled={true}\n            value={\n              amount === \"\"\n              ? \"0\"\n              : result === null\n              ? \"Calculating...\"\n              : result\n            }\n            className=\"form__input\"\n          />\n          <select\n            name=\"convertTo\"\n            value={convertTo}\n            onChange={this.handleSelect}\n            className=\"form__select\"\n          >\n            {currencies.map(currency => (\n            <option key={currency} value={currency}>\n              {currency}\n            </option>\n            ))}\n          </select>\n        </form>\n      </div>\n      \n      <div className=\"container_center\">\n        <div className=\"container__chart\">\n          <h2>Currency exchange history</h2>\n          <Line data={this.state} />\n        </div>\n      </div>\n\n      </div>\n    );\n  }\n}\n\nexport default Converter;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport './index.css';\nimport Converter from './Converter';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<Converter />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}